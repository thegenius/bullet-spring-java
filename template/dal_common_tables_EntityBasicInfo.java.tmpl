/*
 * This file is generated by jOOQ.
 */
package {{context.group}}.{{context.project}}.dal.common.generated.tables;


import {{context.group}}.{{context.project}}.dal.common.generated.DefaultSchema;
import {{context.group}}.{{context.project}}.dal.common.generated.Indexes;
import {{context.group}}.{{context.project}}.dal.common.generated.Keys;
import {{context.group}}.{{context.project}}.dal.common.generated.tables.records.EntityBasicInfoRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EntityBasicInfo extends TableImpl<EntityBasicInfoRecord> {

    private static final long serialVersionUID = -1707468787;

    /**
     * The reference instance of <code>ENTITY_BASIC_INFO</code>
     */
    public static final EntityBasicInfo ENTITY_BASIC_INFO = new EntityBasicInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityBasicInfoRecord> getRecordType() {
        return EntityBasicInfoRecord.class;
    }

    /**
     * The column <code>ENTITY_BASIC_INFO.ID</code>. 主键
     */
    public final TableField<EntityBasicInfoRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>ENTITY_BASIC_INFO.ENTITY_ID</code>. 用户ID
     */
    public final TableField<EntityBasicInfoRecord, Long> ENTITY_ID = createField("ENTITY_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户ID");

    /**
     * The column <code>ENTITY_BASIC_INFO.NICKNAME</code>. 用户昵称
     */
    public final TableField<EntityBasicInfoRecord, String> NICKNAME = createField("NICKNAME", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "用户昵称");

    /**
     * The column <code>ENTITY_BASIC_INFO.IDENTITY_CARD_NO</code>. 身份证号码
     */
    public final TableField<EntityBasicInfoRecord, String> IDENTITY_CARD_NO = createField("IDENTITY_CARD_NO", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "身份证号码");

    /**
     * The column <code>ENTITY_BASIC_INFO.IDENTITY_CARD_NATION</code>. 身份证地区
     */
    public final TableField<EntityBasicInfoRecord, String> IDENTITY_CARD_NATION = createField("IDENTITY_CARD_NATION", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "身份证地区");

    /**
     * The column <code>ENTITY_BASIC_INFO.FIRST_NAME</code>. 名字
     */
    public final TableField<EntityBasicInfoRecord, String> FIRST_NAME = createField("FIRST_NAME", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "名字");

    /**
     * The column <code>ENTITY_BASIC_INFO.MIDDLE_NAME</code>. 中名
     */
    public final TableField<EntityBasicInfoRecord, String> MIDDLE_NAME = createField("MIDDLE_NAME", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "中名");

    /**
     * The column <code>ENTITY_BASIC_INFO.LAST_NAME</code>. 姓氏
     */
    public final TableField<EntityBasicInfoRecord, String> LAST_NAME = createField("LAST_NAME", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "姓氏");

    /**
     * The column <code>ENTITY_BASIC_INFO.IS_TEST</code>. 是否是测试数据
     */
    public final TableField<EntityBasicInfoRecord, Byte> IS_TEST = createField("IS_TEST", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否是测试数据");

    /**
     * The column <code>ENTITY_BASIC_INFO.IS_DELETED</code>. 是否已经删除
     */
    public final TableField<EntityBasicInfoRecord, Byte> IS_DELETED = createField("IS_DELETED", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否已经删除");

    /**
     * The column <code>ENTITY_BASIC_INFO.CREATE_ZONE</code>. 创建时区
     */
    public final TableField<EntityBasicInfoRecord, Integer> CREATE_ZONE = createField("CREATE_ZONE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "创建时区");

    /**
     * The column <code>ENTITY_BASIC_INFO.UPDATE_ZONE</code>. 更新时区
     */
    public final TableField<EntityBasicInfoRecord, Integer> UPDATE_ZONE = createField("UPDATE_ZONE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "更新时区");

    /**
     * The column <code>ENTITY_BASIC_INFO.CREATE_TIME</code>. 创建时间
     */
    public final TableField<EntityBasicInfoRecord, Long> CREATE_TIME = createField("CREATE_TIME", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "创建时间");

    /**
     * The column <code>ENTITY_BASIC_INFO.UPDATE_TIME</code>. 更新时间
     */
    public final TableField<EntityBasicInfoRecord, Long> UPDATE_TIME = createField("UPDATE_TIME", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "更新时间");

    /**
     * The column <code>ENTITY_BASIC_INFO.CREATE_BY</code>. 创建者
     */
    public final TableField<EntityBasicInfoRecord, Long> CREATE_BY = createField("CREATE_BY", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "创建者");

    /**
     * The column <code>ENTITY_BASIC_INFO.UPDATE_BY</code>. 更新者
     */
    public final TableField<EntityBasicInfoRecord, Long> UPDATE_BY = createField("UPDATE_BY", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "更新者");

    /**
     * The column <code>ENTITY_BASIC_INFO.VERSION</code>. 乐观锁版本号
     */
    public final TableField<EntityBasicInfoRecord, Integer> VERSION = createField("VERSION", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "乐观锁版本号");

    /**
     * Create a <code>ENTITY_BASIC_INFO</code> table reference
     */
    public EntityBasicInfo() {
        this(DSL.name("ENTITY_BASIC_INFO"), null);
    }

    /**
     * Create an aliased <code>ENTITY_BASIC_INFO</code> table reference
     */
    public EntityBasicInfo(String alias) {
        this(DSL.name(alias), ENTITY_BASIC_INFO);
    }

    /**
     * Create an aliased <code>ENTITY_BASIC_INFO</code> table reference
     */
    public EntityBasicInfo(Name alias) {
        this(alias, ENTITY_BASIC_INFO);
    }

    private EntityBasicInfo(Name alias, Table<EntityBasicInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private EntityBasicInfo(Name alias, Table<EntityBasicInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> EntityBasicInfo(Table<O> child, ForeignKey<O, EntityBasicInfoRecord> key) {
        super(child, key, ENTITY_BASIC_INFO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_68);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EntityBasicInfoRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_6;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EntityBasicInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<EntityBasicInfoRecord>>asList(Keys.CONSTRAINT_6);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityBasicInfo as(String alias) {
        return new EntityBasicInfo(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityBasicInfo as(Name alias) {
        return new EntityBasicInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityBasicInfo rename(String name) {
        return new EntityBasicInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityBasicInfo rename(Name name) {
        return new EntityBasicInfo(name, null);
    }
}
